name: CD

on:
  push:
    branches: [ chore/TLY-107-CD ]

#  push:
#    branches: [ master ]
#    paths-ignore:
#      - 'README.md'
#      - 'docs/**'
#      - '.github/**'
#      - '.gitignore'
#  workflow_dispatch:
#concurrency:
#  group: deploy-master
#  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.read_tag.outputs.IMAGE_TAG }}

    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Run build-deploy.sh
        run: |
          chmod +x ./infra/scripts/build-deploy.sh
          ./infra/scripts/build-deploy.sh

      - name: IMAGE_TAG 설정
        id: read_tag
        run: |
          echo "IMAGE_TAG=$(cat image_tag.txt)" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$(cat image_tag.txt)" >> $GITHUB_ENV

      - name: 도커 이미지 빌드
        run: |
          docker build --no-cache -t ${{secrets.DOCKER_IMAGE_NAME }}:$IMAGE_TAG -f ./infra/docker/Dockerfile .

      - name: 도커 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 도커 허브 푸시
        run: |
          docker push ${{ secrets.DOCKER_IMAGE_NAME }}:$IMAGE_TAG

      - name: Docker compose file 업로드 준비
        run: |
          mkdir -p deploy
          cp -r ./infra/compose/prod/* ./deploy

      - name: Scripts 업로드 준비
        run: |
          mkdir -p ./deploy/scripts
          cp ./infra/scripts/notification-blue-green-deploy.sh ./deploy/scripts/
          cp ./infra/scripts/start-notification.sh ./deploy/scripts

      - name: Artifact 업로드
        uses: actions/upload-artifact@v4
        with:
          name: infra
          path: ./deploy

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Artifact 다운로드
        uses: actions/download-artifact@v4
        with:
          name: infra
          path: ./infra

      - name: 환경변수 생성 및 전송
        run: |
          echo "SPRING_MONGO_URL=${{ secrets.SPRING_MONGO_URI }}" >> .env
          echo "IMAGE_TAG=${{ needs.build.outputs.IMAGE_TAG }}" >> .env
          cp .env ./infra/notification-service


      - name: SCP 전송
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{secrets.EC2_PORT }}
          source: |
            ./infra
          target: "/home/ubuntu/threadly"

      - name: 환경 변수 주입 및 배포
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            set -e
            cd ~/threadly
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.IMAGE_TAG }}
            
            chmod +x /home/ubuntu/threadly/infra/scripts/notification-blue-green-deploy.sh
            /home/ubuntu/threadly/infra/scripts/notification-blue-green-deploy.sh
            
            chmod +x /home/ubuntu/threadly/infra/scripts/clean-old-images.sh
            /home/ubuntu/threadly/infra/scripts/clean-old-images.sh ${{ secrets.DOCKER_IMAGE_NAME }} ${{ needs.build.outputs.IMAGE_TAG }}